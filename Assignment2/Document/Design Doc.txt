CS550 Assignment 2 
Weilun Zhao; A20329942

Design Document

1. Program design: 
	In this project, my client can be a client which sends request(input/get/del) or be a server which listens to requests and sends replies. 

1). As a client:
	P2PClient: send input/get/del request to P2PClient.
	If the client send the “input” request, then input “key” and “value” saving them in the DHT by using the method of getClientNumberWithInputKey() to know where the <key, value> should to be stored. In addition, there is a back up version of <key, value> sent to another server located by getClientNumberWithInputKey_backup().
	Using get() to get value by key. If the client send “get” at first and there is no key or value in the DHT, then return “get failed”; input nonexistent key and return the “get failed”. If one server which stores the expected key and value, but lost connection.
The client will get the value from the back up server.
	Using del() to delete value from DHT.(there is no back up design for this part)

method description:
	a.inputOperation() 
	input the operations such as input, get or del. According to the input operation, P2Pclient executes put(), get() or del().

	b.put()
	input key and value, and return a boolean value to let the local client know put whether successfully or not.

	c.contectedWithClient() (included in put())
	Local client uses input key and value, and stored client info to connect with P2PServer. In addition, local client receives the reply about the input result from the server.
	
	d.get()
	input the key and use the sendKeyGetValue() to receive the get value

	e.sendKeyGetValue()
	Local client uses input key and stored client info to get connection with P2PServer and receives the result of get(). If the result is “”, then get() failed. If the result is type of string and not equal to null, then get() successful.
	
	f.del()
	input the key and use the sendDelKeyRequest() to the del result in boolean type.

	g.sendDelKeyRequest()
	Local client uses input key and stored client info to get connection with P2P
client-server and receives the result of del(). If the local client gets “DELFail”, then del() failed. If the local client gets “DELSUC”, then del() successful.

	h.getClientNumberWithInputKey_Resilience()
	To get the back up client number; this is the algorithm to use the key and know where the key and value should be stored as back up version

	i.getClientInfo()
	use the getClientNumberWithInputKey_Resilience() to get back up client number and to connect with the back up server and save the key and value to the server.

	
		
2). As a server 
P2PServer: receive requests and send reply
	a.class of RequestHandler
	handles received request(input/get/del) with multi-thread.
	If the server receives “INPUT”, it uses inputKeyValue() to store the input info in to DHT;
	If the server receives “GET”, it uses returnTheKeyValue() to get value in string type in the DHT;
	If the server receives “DEL”, it uses deleteTheKeyAndValue() to delete key and value in the DHT.
	


3). Additional method: 
	a.readFileContent()
	read file “list.txt” which stores the client info and its port.

	b.messagePrint()
	print String type messages.
	
	c.getClientNumberWithInputKey()
	use the key to know which client should save the key and value.

2. tradeoffs
	a. back up design in del() or not
	If delete the key in the DHT directly the <key, value>, the back up value save in the save server will not be delete. The back up version is one of the resource to recover the data, if the servers lost connection in the DHT. So I decide to keep the <key, value> after executing del().

	b. uniformed  size of <key, value> and header vs nonuniform
	I decide use uniformed size <key, value> and header. If using uniformed size of information, the empty place will be filled with “0”.Thus it increases the load of message transition in the socket(TCP). 

	c. the algorithm of locating a server to save the key
	At first, getting the number of server from the info of “list.txt”. Change the string type key into char. Get reminder by using the char divided by the number of client.
And the reminder will be the saving location of the key.
	
